
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->
    <meta name="description" content="">
    <meta name="author" content="">
    <link rel="icon" href="../../favicon.ico">

    <title>Arjun's project, generated with EJS</title>

    <!-- Bootstrap core CSS -->
    <link href="css/bootstrap.min.css" rel="stylesheet">

    <!-- Custom styles for this template -->
    <link href="css/main.css" rel="stylesheet">

  </head>

  <body>

    <nav class="navbar navbar-inverse navbar-fixed-top">
      <div class="container">
        <div class="navbar-header">
          <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar" aria-expanded="false" aria-controls="navbar">
            <span class="sr-only">Toggle navigation</span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
          </button>
          <a class="navbar-brand" href="#">Hub</a>
        </div>
        <div id="navbar" class="collapse navbar-collapse">
          <ul class="nav navbar-nav">
            <li class="active"><a href="#wan">Credits</a></li>
            <li><a href="#too">Placeholder</a></li>
            <li><a href="#phree">Placeholder</a></li>
          </ul>
        </div><!--/.nav-collapse -->
      </div>
    </nav>

    <div class="container">
        <!-- 1. The <iframe> (and video player) will replace this <div> tag. -->
            <form>
              <div class="form-group">
                <label for="email">Email address:</label>
                <input type="email" class="form-control" id="email">
              </div>
            </form> 
    <div id="player"></div>
        <div id="controls">
          <div id="buttons" style="float: left;">

            <button id="play" type="button" class="btn btn-default" aria-label="Left Align"">
                <span class="glyphicon glyphicon-play" aria-hidden="true"></span>
            </button>
            <button id="pause" type="button" class="btn btn-default" aria-label="Left Align">
                <span class="glyphicon glyphicon-pause" aria-hidden="true"></span>
            </button>

          </div>

        <!-- CURRENTLY WORKING ON THIS-------->
        <div id = "progressBar" style="
            width: 600px;
            height: 3px;
            margin-left: 10px;
            margin-top: 13px;
            background-color: black;
            float: left;">
                <div id="line" style="border-style: solid; top: 50%; position: relative; border-width: 1px"></div>
                <div id="square" style="height: 15px; width: 15px; position: relative; border-width: 2px; border-style: solid; top: 8.5px; left: 0%; margin-top: -15.5px;"></div>

        </div>

      </div>
</div>


    <!-- Bootstrap core JavaScript
    ================================================== -->
    <!-- Placed at the end of the document so the pages load faster -->
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js"></script>
    <script>window.jQuery || document.write('<script src="js/jquery.min.js"><\/script>')</script>
    <script src="js/bootstrap.min.js"></script>

    <script>
      function initalizePlayer() {
            var customURL = document.getElementById("email");
            console.log(customURL);
      }
        function initializeButtons() {
            var socket = io();
            var playButton = $('#play');
            var pauseButton = $('#pause');

            playButton.click(function (event) {
              var mydata = {state: 'play', time: player.getCurrentTime()};
              socket.emit('event', mydata);
            });
            pauseButton.click(function (event) {
              var mydata = {state: 'pause', time: player.getCurrentTime()};
              socket.emit('event', mydata);
            });
        }
        function progressBarLoop() {
            var progressBar = $('#progressBar');
            var progressSquare = $('#square');
            var videoLength = player.getDuration();
            progressBar.click(function(event) {
                //send seek request
                var divOffset = $(this).offset();
                var temp = io();

                var seekToTemp = (event.pageX - divOffset.left)/600*videoLength;
                var states = {state: 'play', time: seekToTemp};

                temp.emit('event', states);
                console.log(seekToTemp);

            }); 
            setInterval(function(){
                if(player == null || progressBar == null){
                    return;
                }
                var fraction = player.getCurrentTime()/player.getDuration()*100;
                progressSquare.css("left", fraction.toString() + "%");

            }, 200);
        }
    </script>


    <script>
      // 2. This code loads the IFrame Player API code asynchronously.
      var tag = document.createElement('script');

      tag.src = "https://www.youtube.com/iframe_api";
      var firstScriptTag = document.getElementsByTagName('script')[0];
      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

      // 3. This function creates an <iframe> (and YouTube player)
      //    after the API code downloads.
      var player;
      function onYouTubeIframeAPIReady() {
        player = new YT.Player('player', {
          height: '480',
          width: '720',
          videoId: 'A6APxbBYnoo',
          events: {
            'onReady': onPlayerReady,
            'onStateChange': onPlayerStateChange
        },
        playerVars: {
            'controls': 0,
            'disablekb': 1,
            'modestbranding': 1,
            'rel': 0,
            'showinfo': 0
        }
      });
      }
      // 4. The API will call this function when the video player is ready.
      function onPlayerReady(event) {
        progressBarLoop();
        initializeButtons();
        event.target.playVideo();
      }

      // 5. The API calls this function when the player's state changes.
      //    The function indicates that when playing a video (state=1),
      //    the player should play for six seconds and then stop.
      var done = false;
      function onPlayerStateChange(event) {
          console.log(event.data);
        if (event.data == YT.PlayerState.PLAYING && !done) {
          setTimeout(stopVideo, 60000);
          done = true;
        }
      }
      function stopVideo() {
        player.stopVideo();
      }
      function muteVideo() {
          player.mute();
      }
      function playVideo() {
      	player.playVideo();
      }
      function pauseVideo() {
        player.pauseVideo();
      }
      function seekTo(seconds) {
        player.seekTo(seconds);
      }
    </script>
    </div><!-- /.container -->
    <script src = "/js/socket.io.js"></script>
    <script>
      var socket = io();
        socket.on('event', function(msg) {
          if(msg.state.toString() == 'play') {
            if(Math.abs(parseFloat(msg.time.toString()) - player.getCurrentTime() ) > 1)
              seekTo(parseFloat(msg.time.toString()));
            playVideo();
          }
          else if (msg.state.toString() == 'pause') {
            pauseVideo();
          }
        });
          
	  </script>
  </body>
</html>
